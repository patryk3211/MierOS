--- a/clang/lib/Basic/Targets.cpp	2022-11-29 11:05:58.000000000 +0100
+++ b/clang/lib/Basic/Targets.cpp	2023-01-27 15:59:49.923572048 +0100
@@ -514,6 +514,8 @@
       return new FuchsiaTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::KFreeBSD:
       return new KFreeBSDTargetInfo<X86_32TargetInfo>(Triple, Opts);
+    case llvm::Triple::MierOS:
+      return new MierOSTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Minix:
       return new MinixTargetInfo<X86_32TargetInfo>(Triple, Opts);
     case llvm::Triple::Solaris:
@@ -563,6 +565,8 @@
     }
     case llvm::Triple::DragonFly:
       return new DragonFlyBSDTargetInfo<X86_64TargetInfo>(Triple, Opts);
+    case llvm::Triple::MierOS:
+      return new MierOSTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::NetBSD:
       return new NetBSDTargetInfo<X86_64TargetInfo>(Triple, Opts);
     case llvm::Triple::OpenBSD:
--- a/clang/lib/Basic/Targets/OSTargets.h	2022-11-29 11:05:58.000000000 +0100
+++ b/clang/lib/Basic/Targets/OSTargets.h	2023-02-03 21:55:44.071898125 +0100
@@ -340,6 +340,36 @@
       : OSTargetInfo<Target>(Triple, Opts) {}
 };
 
+// MierOS Target
+template <typename Target>
+class LLVM_LIBRARY_VISIBILITY MierOSTargetInfo : public OSTargetInfo<Target> {
+protected:
+  void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                    MacroBuilder &Builder) const override {
+    // MierOS defines
+    DefineStd(Builder, "unix", Opts);
+    Builder.defineMacro("__mieros__");
+    Builder.defineMacro("__ELF__");
+  }
+public:
+  MierOSTargetInfo(const llvm::Triple &Triple, const TargetOptions &Opts)
+      : OSTargetInfo<Target>(Triple, Opts) {
+    this->WIntType = TargetInfo::UnsignedInt;
+    switch(Triple.getArch()) {
+      case llvm::Triple::x86:
+      case llvm::Triple::x86_64:
+        this->HasFloat128 = true;
+        break;
+      default:
+        break;
+    }
+  }
+
+  const char *getStaticInitSectionSpecifier() const override {
+    return ".text.startup";
+  }
+};
+
 // Minix Target
 template <typename Target>
 class LLVM_LIBRARY_VISIBILITY MinixTargetInfo : public OSTargetInfo<Target> {
--- a/clang/lib/Driver/Driver.cpp	2022-11-29 11:05:58.000000000 +0100
+++ b/clang/lib/Driver/Driver.cpp	2023-01-27 18:59:59.503334858 +0100
@@ -34,6 +34,7 @@
 #include "ToolChains/Linux.h"
 #include "ToolChains/MSP430.h"
 #include "ToolChains/MSVC.h"
+#include "ToolChains/MierOS.h"
 #include "ToolChains/MinGW.h"
 #include "ToolChains/Minix.h"
 #include "ToolChains/MipsLinux.h"
@@ -6019,6 +6020,9 @@
     case llvm::Triple::Mesa3D:
       TC = std::make_unique<toolchains::AMDGPUToolChain>(*this, Target, Args);
       break;
+    case llvm::Triple::MierOS:
+      TC = std::make_unique<toolchains::MierOSToolChain>(*this, Target, Args);
+      break;
     case llvm::Triple::Win32:
       switch (Target.getEnvironment()) {
       default:
--- a/clang/lib/Driver/ToolChains/MierOS.cpp	1970-01-01 01:00:00.000000000 +0100
+++ b/clang/lib/Driver/ToolChains/MierOS.cpp	2023-02-04 12:05:32.635641359 +0100
@@ -0,0 +1,282 @@
+#include "MierOS.h"
+#include "CommonArgs.h"
+#include "clang/Config/config.h"
+#include "clang/Driver/Compilation.h"
+#include "clang/Driver/Driver.h"
+#include "clang/Driver/Job.h"
+#include "clang/Driver/Options.h"
+#include "clang/Basic/DiagnosticDriver.h"
+#include "llvm/Support/Path.h"
+#include "llvm/Support/VirtualFileSystem.h"
+
+using namespace llvm::opt;
+using namespace clang::driver;
+using namespace clang::driver::toolchains;
+using namespace clang::driver::tools;
+
+MierOSToolChain::MierOSToolChain(const Driver &D, const llvm::Triple &Triple,
+               const llvm::opt::ArgList &Args)
+    : Generic_ELF(D, Triple, Args) {
+  getProgramPaths().push_back(D.getInstalledDir());
+  if (D.getInstalledDir() != D.Dir)
+    getProgramPaths().push_back(D.Dir);
+
+  if (!D.SysRoot.empty()) {
+    SmallString<128> P(D.SysRoot);
+    llvm::sys::path::append(P, "lib");
+    getFilePaths().push_back(std::string(P.str()));
+  }
+}
+
+Tool *MierOSToolChain::buildAssembler() const {
+  return new mieros::Assemble(*this);
+}
+
+Tool *MierOSToolChain::buildLinker() const {
+  return new mieros::Link(*this);
+}
+
+void mieros::Assemble::ConstructJob(Compilation &C, const JobAction &JA,
+                                    const InputInfo &Output,
+                                    const InputInfoList &Inputs,
+                                    const ArgList &Args,
+                                    const char *LinkingOutput) const {
+  ArgStringList CmdArgs;
+ 
+  Args.AddAllArgValues(CmdArgs, options::OPT_Wa_COMMA, options::OPT_Xassembler);
+ 
+  CmdArgs.push_back("-o");
+  CmdArgs.push_back(Output.getFilename());
+ 
+  for (const auto &II : Inputs)
+    CmdArgs.push_back(II.getFilename());
+ 
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::AtFileCurCP(), Exec, CmdArgs, Inputs, Output));
+}
+ 
+void mieros::Link::ConstructJob(Compilation &C, const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &Args,
+                              const char *LinkingOutput) const {
+  const toolchains::MierOSToolChain &ToolChain = static_cast<const toolchains::MierOSToolChain &>(getToolChain());
+  const Driver &D = getToolChain().getDriver();
+  ArgStringList CmdArgs;
+
+  Args.ClaimAllArgs(options::OPT_g_Group);
+  Args.ClaimAllArgs(options::OPT_emit_llvm);
+  Args.ClaimAllArgs(options::OPT_w);
+
+  CmdArgs.push_back("-z");
+  CmdArgs.push_back("max-page-size=4096");
+
+  if (!D.SysRoot.empty())
+    CmdArgs.push_back(Args.MakeArgString("--sysroot=" + D.SysRoot));
+  if (!Args.hasArg(options::OPT_shared, options::OPT_r) && Args.hasArg(options::OPT_pie))
+    CmdArgs.push_back("-pie");
+  if (Args.hasArg(options::OPT_rdynamic))
+    CmdArgs.push_back("-export-dynamic");
+  
+  if (Args.hasArg(options::OPT_s))
+    CmdArgs.push_back("-s");
+  if (Args.hasArg(options::OPT_r))
+    CmdArgs.push_back("-r");
+  else {
+    CmdArgs.push_back("--build-id");
+    CmdArgs.push_back("--hash-style=gnu");
+  }
+
+  if (Args.hasArg(options::OPT_shared))
+    CmdArgs.push_back("-shared");
+  else if (Args.hasArg(options::OPT_static))
+    CmdArgs.push_back("-Bstatic");
+
+
+  if(Output.isFilename()) {
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back(Output.getFilename());
+  } else {
+    assert(Output.isNothing() && "Invalid output.");
+  }
+
+  Args.AddAllArgs(CmdArgs, options::OPT_L);
+  Args.AddAllArgs(CmdArgs, options::OPT_u);
+
+  ToolChain.AddFilePathLibArgs(Args, CmdArgs);
+
+  if(D.isUsingLTO()) {
+    assert(!Inputs.empty() && "Must have at least one input.");
+    addLTOOptions(ToolChain, Args, CmdArgs, Output, Inputs[0], D.getLTOMode() == LTOK_Thin);
+  }
+
+  addLinkerCompressDebugSectionsOption(ToolChain, Args, CmdArgs);
+  AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs, JA);
+
+  if (!Args.hasArg(options::OPT_r, options::OPT_nostdlib, options::OPT_nodefaultlibs)) {
+    if (Args.hasArg(options::OPT_static))
+      CmdArgs.push_back("-Bdynamic");
+
+    if (!Args.hasArg(options::OPT_nostartfiles)) {
+      CmdArgs.push_back(Args.MakeArgString(ToolChain.GetFilePath("crt0.o")));
+      if (ToolChain.GetRuntimeLibType(Args) == ToolChain::RLT_CompilerRT)
+        CmdArgs.push_back(Args.MakeArgString(ToolChain.getCompilerRT(Args, "crtbegin", ToolChain::FT_Object)));
+    }
+
+    if (D.CCCIsCXX()) {
+      if (ToolChain.ShouldLinkCXXStdlib(Args)) {
+        bool OnlyLibstdcxxStatic = Args.hasArg(options::OPT_static_libstdcxx) && !Args.hasArg(options::OPT_static);
+        CmdArgs.push_back("--push-state");
+        CmdArgs.push_back("--as-needed");
+        if (OnlyLibstdcxxStatic)
+          CmdArgs.push_back("-Bstatic");
+        ToolChain.AddCXXStdlibLibArgs(Args, CmdArgs);
+        if (OnlyLibstdcxxStatic)
+          CmdArgs.push_back("-Bdynamic");
+        CmdArgs.push_back("-lm");
+        CmdArgs.push_back("--pop-state");
+      }
+    }
+
+    AddRunTimeLibs(ToolChain, D, CmdArgs, Args);
+
+    if (!Args.hasArg(options::OPT_nolibc))
+      CmdArgs.push_back("-lc");
+    
+    if (!Args.hasArg(options::OPT_nostartfiles) &&
+        ToolChain.GetRuntimeLibType(Args) == ToolChain::RLT_CompilerRT)
+      CmdArgs.push_back(Args.MakeArgString(ToolChain.getCompilerRT(Args, "crtend", ToolChain::FT_Object)));
+  }
+
+  const char *Exec = Args.MakeArgString(getToolChain().GetLinkerPath());
+  C.addCommand(std::make_unique<Command>(JA, *this, ResponseFileSupport::AtFileCurCP(), Exec, CmdArgs, Inputs, Output));
+}
+
+ToolChain::RuntimeLibType MierOSToolChain::GetDefaultRuntimeLibType() const {
+  return ToolChain::RLT_CompilerRT;
+}
+
+ToolChain::CXXStdlibType MierOSToolChain::GetDefaultCXXStdlibType() const {
+  return ToolChain::CST_Libcxx;
+}
+
+ToolChain::RuntimeLibType MierOSToolChain::GetRuntimeLibType(const llvm::opt::ArgList &Args) const {
+  if (Arg* A = Args.getLastArg(clang::driver::options::OPT_rtlib_EQ)) {
+    StringRef Value = A->getValue();
+    if(Value != "compiler-rt")
+      getDriver().Diag(clang::diag::err_drv_invalid_rtlib_name) << A->getAsString(Args);
+  }
+
+  return ToolChain::RLT_CompilerRT;
+}
+
+ToolChain::CXXStdlibType MierOSToolChain::GetCXXStdlibType(const llvm::opt::ArgList &Args) const {
+  if (Arg* A = Args.getLastArg(clang::driver::options::OPT_stdlib_EQ)) {
+    StringRef Value = A->getValue();
+    if(Value != "libc++")
+      getDriver().Diag(clang::diag::err_drv_invalid_stdlib_name) << A->getAsString(Args);
+  }
+
+  return ToolChain::CST_Libcxx;
+}
+
+ToolChain::UnwindLibType MierOSToolChain::GetUnwindLibType(const llvm::opt::ArgList &Args) const {
+  if (Arg* A = Args.getLastArg(clang::driver::options::OPT_unwindlib_EQ)) {
+    StringRef Value = A->getValue();
+    if(Value == "none")
+      return ToolChain::UNW_None;
+    else if(Value == "" || Value == "platform" || Value == "libunwind")
+      return ToolChain::UNW_CompilerRT;
+    else
+      getDriver().Diag(clang::diag::err_drv_invalid_unwindlib_name) << A->getAsString(Args);
+  }
+
+  return ToolChain::UNW_CompilerRT;
+}
+
+void MierOSToolChain::AddCXXStdlibLibArgs(const ArgList &Args, ArgStringList &CmdArgs) const {
+  switch (GetCXXStdlibType(Args)) {
+    case ToolChain::CST_Libcxx:
+      CmdArgs.push_back("-lc++");
+      if (Args.hasArg(options::OPT_fexperimental_library))
+        CmdArgs.push_back("-lc++experimental");
+      break;
+    case ToolChain::CST_Libstdcxx:
+      llvm_unreachable("invalid stdlib name");
+  }
+}
+
+void MierOSToolChain::AddClangSystemIncludeArgs(const ArgList &DriverArgs, ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+
+  if (DriverArgs.hasArg(options::OPT_nostdinc))
+    return;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    SmallString<128> P(D.ResourceDir);
+    llvm::sys::path::append(P, "include");
+    addSystemInclude(DriverArgs, CC1Args, P);
+  }
+
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+    return;
+
+  StringRef CIncludeDirs(C_INCLUDE_DIRS);
+  if (CIncludeDirs != "") {
+    SmallVector<StringRef, 5> dirs;
+    CIncludeDirs.split(dirs, ":");
+    for (StringRef dir : dirs) {
+      StringRef Prefix =
+          llvm::sys::path::is_absolute(dir) ? "" : StringRef(D.SysRoot);
+      addExternCSystemInclude(DriverArgs, CC1Args, Prefix + dir);
+    }
+    return;
+  }
+
+  if (!D.SysRoot.empty()) {
+    SmallString<128> P(D.SysRoot);
+    llvm::sys::path::append(P, "include");
+    addExternCSystemInclude(DriverArgs, CC1Args, P.str());
+  }
+}
+
+void MierOSToolChain::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs, ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx) ||
+      DriverArgs.hasArg(options::OPT_nostdinc))
+    return;
+
+  const Driver &D = getDriver();
+  std::string Target = getTripleString();
+
+  auto AddCXXIncludePath = [&](StringRef Path) {
+    std::string Version = detectLibcxxVersion(Path);
+    if (Version.empty())
+      return;
+
+    SmallString<128> TargetDir(Path);
+    llvm::sys::path::append(TargetDir, Target, "c++", Version);
+    if (getVFS().exists(TargetDir))
+      addSystemInclude(DriverArgs, CC1Args, TargetDir);
+
+    SmallString<128> Dir(Path);
+    llvm::sys::path::append(Dir, "c++", Version);
+    addSystemInclude(DriverArgs, CC1Args, Dir);
+  };
+
+  switch (GetCXXStdlibType(DriverArgs)) {
+  case ToolChain::CST_Libcxx: {
+    SmallString<128> P(D.Dir);
+    llvm::sys::path::append(P, "..", "include");
+    AddCXXIncludePath(P);
+    break;
+  }
+  default:
+    llvm_unreachable("invalid stdlib name");
+  }
+}
+
+const char *MierOSToolChain::getDefaultLinker() const {
+  return "ld.lld";
+}
+
--- a/clang/lib/Driver/ToolChains/MierOS.h	1970-01-01 01:00:00.000000000 +0100
+++ b/clang/lib/Driver/ToolChains/MierOS.h	2023-02-03 21:09:32.193259021 +0100
@@ -0,0 +1,76 @@
+#ifndef LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_MIEROS_H
+#define LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_MIEROS_H
+
+#include "Gnu.h"
+#include "clang/Basic/LangOptions.h"
+#include "clang/Driver/Tool.h"
+#include "clang/Driver/ToolChain.h"
+#include "llvm/Option/ArgList.h"
+
+namespace clang {
+namespace driver {
+namespace toolchains {
+
+namespace mieros {
+
+class LLVM_LIBRARY_VISIBILITY Assemble : public Tool {
+public:
+  Assemble(const ToolChain &TC)
+      : Tool("mieros::Assemble", "assembler", TC) { }
+
+  bool hasIntegratedCPP() const override { return false; }
+
+  void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output,
+                    const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+class LLVM_LIBRARY_VISIBILITY Link : public Tool {
+public:
+    Link(const ToolChain &TC)
+        : Tool("mieros::Link", "ld.lld", TC) { }
+
+    bool hasIntegratedCPP() const override { return false; }
+    bool isLinkJob() const override { return true; }
+
+    void ConstructJob(Compilation &C, const JobAction &JA,
+                    const InputInfo &Output,
+                    const InputInfoList &Inputs,
+                    const llvm::opt::ArgList &TCArgs,
+                    const char *LinkingOutput) const override;
+};
+
+}
+
+class LLVM_LIBRARY_VISIBILITY MierOSToolChain : public Generic_ELF {
+public:
+  MierOSToolChain(const Driver &D, const llvm::Triple &Triple,
+                  const llvm::opt::ArgList &Args);
+
+  RuntimeLibType GetDefaultRuntimeLibType() const override;
+  CXXStdlibType GetDefaultCXXStdlibType() const override;
+
+  RuntimeLibType GetRuntimeLibType(const llvm::opt::ArgList &Args) const override;
+  CXXStdlibType GetCXXStdlibType(const llvm::opt::ArgList &Args) const override;
+  UnwindLibType GetUnwindLibType(const llvm::opt::ArgList &Args) const override;
+
+  void AddCXXStdlibLibArgs(const llvm::opt::ArgList &Args, llvm::opt::ArgStringList &CmdArgs) const override; 
+  void AddClangSystemIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                                 llvm::opt::ArgStringList &CC1Args) const override;
+  void AddClangCXXStdlibIncludeArgs(const llvm::opt::ArgList &DriverArgs,
+                                    llvm::opt::ArgStringList &CC1Args) const override;
+
+  const char *getDefaultLinker() const override;
+protected:
+  Tool *buildAssembler() const override;
+  Tool *buildLinker() const override;
+};
+
+}
+}
+}
+
+#endif
+
--- a/clang/lib/Driver/CMakeLists.txt	2022-11-29 11:05:58.000000000 +0100
+++ b/clang/lib/Driver/CMakeLists.txt	2023-01-27 15:24:59.490288531 +0100
@@ -63,6 +63,7 @@
   ToolChains/HLSL.cpp
   ToolChains/Hurd.cpp
   ToolChains/Linux.cpp
+  ToolChains/MierOS.cpp
   ToolChains/MipsLinux.cpp
   ToolChains/MinGW.cpp
   ToolChains/Minix.cpp
--- a/clang/lib/Lex/InitHeaderSearch.cpp	2022-11-29 11:05:58.000000000 +0100
+++ b/clang/lib/Lex/InitHeaderSearch.cpp	2023-01-27 16:18:36.400886230 +0100
@@ -352,6 +352,9 @@
   case llvm::Triple::ELFIAMCU:
   case llvm::Triple::Fuchsia:
     break;
+  case llvm::Triple::MierOS:
+    AddPath("/usr/include", System, false);
+    break;
   case llvm::Triple::PS4:
   case llvm::Triple::PS5: {
     // <isysroot> gets prepended later in AddPath().
